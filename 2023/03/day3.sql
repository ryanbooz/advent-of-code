create table dec03 (
	id integer generated by default as identity,
	lines text
);

\COPY dec03(lines) FROM input.txt NULL '';

/*
 * First Star
 * 
 * Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
 */
WITH scematic_table AS (
	SELECT id, char, col FROM dec03,
		regexp_split_to_table(lines,'') WITH ORDINALITY x(char,col)
),
symbols AS (
	SELECT id, char, col FROM scematic_table
	WHERE char != '.' AND char !~ '(\d)'
),
part_numbers_raw AS (
	SELECT id, 
		CASE WHEN char ~ ('\d') THEN char ELSE NULL END AS char,
	col FROM scematic_table
),
part_numbers_position AS (
	SELECT pos, id, string_agg(char,'') AS num, array_agg(col) AS cols FROM ( 
		SELECT count(*) filter(WHERE char IS null) OVER (ORDER BY id, col) pos, id, char, col FROM part_numbers_raw
	) a
	WHERE char IS NOT NULL
	GROUP BY 1,2
)
SELECT sum(num::int) FROM (
	SELECT pos, id, num, int4range(cols[1]::int-1, cols[array_length(cols,1)]::int+1,'[]') numrange FROM part_numbers_position
) pnp, symbols
WHERE (pnp.id = symbols.id OR pnp.id = symbols.id+1 OR pnp.id = symbols.id-1)
	AND symbols.col::int <@ numrange;
ORDER BY pnp.id, pnp.pos;


/*
 * Star 2
 * 
 * This was a lot of manipulation... but it worked. ðŸ˜¬
 */
WITH scematic_table AS (
	SELECT id, char, col FROM dec03,
		regexp_split_to_table(lines,'') WITH ORDINALITY x(char,col)
),
symbols AS (
	SELECT id, char, col FROM scematic_table
	WHERE char != '.' AND char !~ '(\d)'
),
part_numbers_raw AS (
	SELECT id, 
		CASE WHEN char ~ ('\d') THEN char ELSE NULL END AS char,
	col FROM scematic_table
),
part_numbers_position AS (
	SELECT pos, id, string_agg(char,'') AS num, array_agg(col) AS cols FROM ( 
		SELECT count(*) filter(WHERE char IS null) OVER (ORDER BY id, col) pos, id, char, col FROM part_numbers_raw
	) a
	WHERE char IS NOT NULL
	GROUP BY 1,2
),
potential_gears AS (
	SELECT num, pnp.id, symbols.id AS sid, symbols.char, symbols.col, numrange FROM (
		SELECT id, num, int4range(cols[1]::int-1, cols[array_length(cols,1)]::int+1,'[]') numrange FROM part_numbers_position
	) pnp, symbols
	WHERE (pnp.id = symbols.id OR pnp.id = symbols.id+1 OR pnp.id = symbols.id-1)
		AND symbols.col::int <@ numrange
		AND symbols.char = '*'
),
real_gears AS (
	SELECT DISTINCT min(num) OVER (PARTITION BY pg.sid, pg.col) n1, max(num) OVER (PARTITION BY pg.sid, pg.col) n2,
		pg.sid, pg.col FROM potential_gears pg
		JOIN (
			SELECT sid, col FROM potential_gears
			GROUP BY sid, col
			HAVING count(*) = 2) g1
		ON pg.sid = g1.sid AND pg.col = g1.col
)
SELECT sum(n1::int*n2::int) FROM real_gears;

