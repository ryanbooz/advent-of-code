create table dec04 (
	id integer generated by default as identity,
	lines text
);

\COPY dec04(lines) FROM input.txt NULL '';

/*
 * First Star
 * 
 */
with recursive points(c, v) as (
  select 1::bigint, 1::bigint
  union all
  select c+1, v+v from points where c < 25
),
init_cards AS (
	SELECT id, regexp_split_to_array(g[1],'\s+') winners, regexp_split_to_array(g[2],'\s+') nums 
	FROM 
		(SELECT id, regexp_matches(lines, '^Card\s+\d+:\s+(.*)\s+\|\s+(.*)','g') g
			FROM dec04
		) a
),
winning_nums AS (
	SELECT id, unnest(winners) num FROM init_cards
),
play_nums AS (
	SELECT id, unnest(nums) num FROM init_cards
),
winning_counts(card,total_vals) AS (
	SELECT id, count(*) total_vals FROM winning_nums wn
		INNER JOIN play_nums pn using(id,num)
	GROUP BY id
)
--SELECT card, total_vals, r.b AS point_val 
SELECT sum(points.v)
FROM winning_counts wc
	INNER JOIN points ON wc.total_vals = points.c;


/*
 * Second Star
 * 
 * This is not fast as it's building a multi-million line recursive CTE
 * 
 */
with recursive init_cards AS (
	SELECT id, regexp_split_to_array(g[1],'\s+') winners, regexp_split_to_array(g[2],'\s+') nums 
	FROM 
		(SELECT id, regexp_matches(lines, '^Card\s+\d+:\s+(.*)\s+\|\s+(.*)','g') g
			FROM dec04
		) a
),
winning_nums AS (
	SELECT id, unnest(winners) num FROM init_cards
),
play_nums AS (
	SELECT id, unnest(nums) num FROM init_cards
),
winning_counts(card,total_vals) AS (
	SELECT DISTINCT wn.id, COALESCE(total_vals,0) FROM 
	winning_nums wn
	LEFT JOIN (
		SELECT id, count(*) total_vals FROM winning_nums wn
			inner JOIN play_nums pn using(id,num)
		GROUP BY id
	) m
	ON wn.id = m.id
),
card_pile(r, card, points) AS (
	SELECT 1::int r, card, total_vals FROM winning_counts --WHERE card = 1
	UNION ALL
	SELECT r+1, wc.card, total_vals
	FROM winning_counts wc, card_pile
	WHERE wc.card > card_pile.card AND wc.card <= (card_pile.card + card_pile.points)
)
SELECT count(*) FROM card_pile;



